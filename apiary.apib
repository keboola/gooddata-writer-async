HOST: https://syrup.keboola.com/gooddata-writer

--- Keboola GoodData Writer API ---
---
API for access to Keboola Connection GoodData Writer

API calls work only in integration with Keboola Storage API and need Storage API token
---

--
Configuration in Storage API

Each writer has it's own bucket in `sys` stage which is created automatically by [Create writer](#post-%2Fgooddata-writer%2Fwriters) request. By default bucket is named `sys.c-wr-gooddata-[writerId]` but that is not mandatory. It has several attributes:

* **writer** - with value **gooddata** is used to identify that the bucket contains writer configuration
* **writerId** - name of writer, must be unique within project (may contain only letters, numbers and underscores, 20 chars at max)
* **gd.pid** - PID of main GoodData project
* **gd.uid** - UID of GoodData account used for requests to GoodData API
* **gd.username** - username of GoodData account used for requests to GoodData API
* **gd.password** - password of GoodData account used for requests to GoodData API
* **gd.backendUrl** (optional) - url to non-default GoodData backend
* **filterColumn** (optional) - name of column which will be used for filtering of cloned projects by pid
* **maintenance** (optional) - processing of writer's jobs is postponed if not empty

There are two basic configuration tables used for data loads: **data_sets** and **date_dimensions**. 

There can be other tables used for special purposes: **projects, users, project_users** for project cloning and user management and **filters, filters_users, filters_projects** for mandatory user filters. These are described in their own sections.

# data_sets

Contains definition and metadata of each dataset. It is required. Columns:

* **id** (primary key) - full id of table in Storage API
* **name** - desired name of dataset in GoodData
* **export** - flag whether to export the dataset in [Upload Project](#post-%2Fgooddata-writer%2Fupload-project) request or not
* **isExported** - flagh whether the dataset has been exported to GoodData or not
* **lastChangeDate** - date of last change of dataset's configuration, in ISO 8601 format
* **incrementalLoad** - should be empty or 0 for full load or contain number of days which are used for export of table from SAPI
* **ignoreFilter** - flag whether the filtering of data for clones should be ignored on this table
* **definition** - JSON object with description of columns definition, example:

    {
        "id" : {
            "gdName" : "Id",
            "type" : "CONNECTION_POINT"
        },
        "name" : {
            "gdName" : "Name",
            "type" : "ATTRIBUTE"
        }
    }

# date_dimensions

Contains definition and metadata of each date dimension. It is optional. Columns:

* **name** (primary key) - name of date dimension
* **includeTime** - flag whether the dimension contains time
* **template** - name of dimension template if non-default
* **isExported** - flag whether the dimension has been exported to GoodData or not

--

--
Writers
Commands for handling whole writers
--


### Get writers list
Returns list of available writers and their buckets

GET /writers
> X-StorageApi-Token: your_token
< 200
< Content-Type: application/json
{ 
    "status": "ok", 
    "duration": 45.11, 
    "writers": [
        {
            "id": "writer1",
            "bucket": "sys.c-wr-gooddata-writer1",
            "writer": "gooddata",
            "writerId": "writer1",
            "gd": {
                "pid": "vcmxlgjsojfdsjfdsdskfsfdks",
                "uid": "dkgkfdreituigjfgfjkdgfkdfng",
                "username": "user1@clients.keboola.com",
                "password": "password"
            }
        },
        {
            "id": "writer2",
            "bucket": "sys.c-wr-gooddata-writer2",
            "writer": "gooddata",
            "writerId": "writer2",
            "gd": {
                "pid": "xcmxlgjsojfdsjfdsdskfsfdks",
                "uid": "wwgkfdreituigjfgfjkdgfkdwre",
                "username": "user2@clients.keboola.com",
                "password": "password2"
            }
        }
    ]
}

### Get writer info
Returns attributes of the writer

#### Parameters

* **writerId** (required)

GET /writers?writerId={writerId}
> X-StorageApi-Token: your_token
< 200
< Content-Type: application/json
{ 
    "status": "ok", 
    "duration": 45.11, 
    "writer": [
        {
            "writer": "gooddata",
            "writerId": "writer1",
            "gd": { 
                "pid": "vcmxlgjsojfdsjfdsdskfsfdks",
                "uid": "dkgkfdreituigjfgfjkdgfkdfng",
                "username": "user1@clients.keboola.com",
                "password": "password"
            }
        }
    ]
}


### Create writer
Creates new configuration bucket and either uses existing GoodData project or creates new one along with dedicated GoodData user. Credentials and PID are stored to bucket attributes.

#### Parameters

* **writerId** (required)
* **users** (optional) - comma-separated list of users emails which should be added to main project
* if you want to create new GD project:
  * **accessToken** (optional) - GoodData access token (main Keboola by default)
* if you have existing project:
  * **pid** (required) - pid of the project
  * **username** (required) - username of your user with admin access to the project
  * **password** (required) - password of your user
POST /writers
> X-StorageApi-Token: your_token
> Accept: application/json
{ "writerId": "writer1" }
< 202
< Content-Type: application/json
{ 
    "status": "ok", 
    "duration": 2.89, 
    "job": job_id,
    "url": "https://syrup.keboola.com/gooddata-writer/jobs?writerId=writer1&jobId=job_id"
}


### Set writer's attributes
Sets attributes to writer's configuration

#### Parameters

* **attribute** (required) - attribute which you want to set
POST /writers/{writerId}
> X-StorageApi-Token: your_token
> Accept: application/json
{ "maintenance": 1 }
< 202
< Content-Type: application/json
{ 
    "status": "ok", 
    "duration": 2.89
}


### Reset project
Creates new GoodData project for the writer and enqueues the old for deletion

#### Parameters

* **writerId** (required)
* **removeClones** (optional) - remove or keep all clones
* **queue** (optional) - with value **secondary** will put job in secondary queue
POST /reset-project
> X-StorageApi-Token: your_token
> Accept: application/json
{ "writerId": "writer1" }
< 202
< Content-Type: application/json
{ 
    "status": "ok", 
    "duration": 2.89, 
    "job": job_id,
    "url": "https://syrup.keboola.com/gooddata-writer/jobs?writerId=writer1&jobId=job_id"
}


### Delete writer
Deletes configuration bucket and enqueues GoodData project and dedicated GoodData user for removal (real removal from GoodData is scheduled after one month)

#### Parameters

* **writerId** (required)
* **queue** (optional) - with value **secondary** will put job in secondary queue
DELETE /writers?writerId={writerId}
> X-StorageApi-Token: your_token
< 202
< Content-Type: application/json
{ 
    "status": "ok", 
    "duration": 1.89, 
    "job": job_id,
    "url": "https://syrup.keboola.com/gooddata-writer/jobs?writerId=writer1&jobId=job_id"
}



--
Users management
Commands for handling GoodData users

# Tables configuration

## users

Table is used for list of created users. When you create new user Writer will add it to this table. It's columns are:

* **email** (primary key) - email of user
* **uid** - GoodData UID of user

--


### Get users list

GET /users?writerId={writerId}
> X-StorageApi-Token: your_token
< 200
< Content-Type: application/json
{ "status": "ok", "duration": 31.54, "users": [
        {
            "email": "11112@test.keboola.com",
            "uri": "/gdc/account/profile/3b761f4d31dcd3c28a4336117635dd38"
        },
        {
            "email": "2@test.keboola.com",
            "uri": "/gdc/account/profile/8a2c90bcae3ea2f7eafc875c0917e268"
        }
    ]
}


### Create user
Creates new GoodData user in Keboola domain.

#### Parameters

* **writerId** (required)
* **email** (required) - user email
* **password** (required) - user password (has to have at least seven characters)
* **firstName** (required) - user first name
* **lastName** (required) - user last name
* **ssoProvider** (optional) - optional ssoProvider, default is keboola.com
* **queue** (optional) - with value **secondary** will put job in secondary queue
POST /users
> X-StorageApi-Token: your_token
> Accept: application/json
{ "writerId": "writer1", "email" }
< 202
< Content-Type: application/json
{ 
    "status": "ok", 
    "job": job_id, 
    "url": "https://syrup.keboola.com/gooddata-writer/jobs?writerId=writer1&jobId=job_id",
    "duration": 35.12 
}


--
Project clones

Main project of the writer can be cloned multiple times. Cloned projects will have the same structure as the main project but can contain different data.

If you specify bucket attribute `filterColumn` and perform upload, Writer will look for a column with specified name in each table and will upload to each cloned project only those rows which contain pid of the project in the column. Main project will recieve all rows regardless values of the column.

If you have a table which you want to load whole to each cloned project, you can add attribute `ignoreFilter` with non-null value to it's configuration.

API calls [/upload-table](#post-%2Fgooddata-writer%2Fupload-table) and [/upload-project](#post-%2Fgooddata-writer%2Fupload-project) accept parameter `pid` which ensures data load only to specified project.

# Tables configuration

## projects

Table is used for list of main project clones. When you [create new clone](#post-%2Fgooddata-writer%2Fprojects) Writer will add it's PID to this table. It's columns are:

* **pid** (primary key) - GoodData PID of project
* **active** - flag whether the project should be loaded with data when performing upload requests

## project_users

Table is used as log of operations between projects and users

* **id** (primary key) - some uinque identifier
* **pid** - PID of GoodData project
* **email** - email of GoodData user
* **role** - role of user
* **action** - action (**add** or **invite**)

--


### Get projects list

Returns list of project clones including main project marked with `main: 1` field

GET /projects?writerId={writerId}
> X-StorageApi-Token: your_token
< 200
< Content-Type: application/json
{ "status": "ok", "duration": 31.54, "projects": [
        {
            "pid": "l7eqkx6daomtv5iw2912p019anskzt1n",
            "active": 1,
            "main": 1
        },
        {
            "pid": "rcgtjwroldsctin8pzxxg1n1nwbgelhb",
            "active": 1
        },
        {
            "pid": "xjywplmhejceb6j3ezzlxiganmjavqio",
            "active": 1
        }
    ]
}


### Create project
Creates new GoodData project by cloning the main project with PID in bucket attribute.

#### Parameters

* **writerId** (required)
* **name** (optional) - name of project ("KBC - projectId - writerId" by default)
* **accessToken** (optional) - GoodData access token (main Keboola by default)
* **queue** (optional) - with value **secondary** will put job in secondary queue
POST /projects
> X-StorageApi-Token: your_token
> Accept: application/json
{ "writerId": "writer1" }
< 202
< Content-Type: application/json
{ 
    "status": "ok", 
    "job": job_id, 
    "url": "https://syrup.keboola.com/gooddata-writer/jobs?writerId=writer1&jobId=job_id",
    "duration": 35.12 
}


### Get list of users in project

GET /project-users?writerId={writerId}&pid={pid}
> X-StorageApi-Token: your_token
< 200
< Content-Type: application/json
{ "status": "ok", "duration": 31.54, "users": [
        {
            "email": "11112@test.keboola.com",
            "role": "editor"
        },
        {
            "email": "2@test.keboola.com",
            "role": "editor"
        }
    ]
}


### Add user to project
Adds GoodData user to specified project.

If user does not exists or exists in other domain, project invitation will be sent to user.

#### Parameters

* **writerId** (required)
* **pid** (required) - PID of project
* **email** (required) - email of user
* **role** (required) - role of user (one of: admin, editor, readOnly, dashboardOnly)
* **createUser** (optional) - if true and user does not exist, it will be created
* **queue** (optional) - with value **secondary** will put job in secondary queue
POST /project-users
> X-StorageApi-Token: your_token
> Accept: application/json
{ "writerId": "writer1", "pid": "xjywplmhejceb6j3ezzlxiganmjavqio", "email": "user1@keboola.com", "role": "editor" }
< 202
< Content-Type: application/json
{ 
    "status": "ok", 
    "job": job_id, 
    "url": "https://syrup.keboola.com/gooddata-writer/jobs?writerId=writer1&jobId=job_id",
    "duration": 35.12 
}


### Remove user from project
Remove user from specified project. Project invitations will be also canceled.

#### Parameters

* **writerId** (required)
* **pid** (required) - PID of project
* **email** (required) - email of user
DELETE /project-users?writerId={writerId}&pid={pr0j3ct_p1d}&email={user@email.com}
> X-StorageApi-Token: your_token
< 202
< Content-Type: application/json
{ 
    "status": "ok", 
    "job": job_id, 
    "url": "https://syrup.keboola.com/gooddata-writer/jobs?writerId=writer1&jobId=job_id",
    "duration": 35.12 
}


--
Project structure
Commands for manipulation with GoodData project structure and data
--


### Upload whole project

#### Parameters

* **writerId** (required)
* **incrementalLoad** (optional) - force incremental or full load
* **pid** (optional) - filter rows from data table by filter column (see [Project clones](#projectclones))
* **queue** (optional) - with value **secondary** will put job in secondary queue
POST /upload-project
> X-StorageApi-Token: your_token
> Accept: application/json
{ "writerId": "123" }
< 202
< Content-Type: application/json
{ 
    "status": "ok", 
    "jobs": {
        job_id1,
        job_id2
    },
    "batch": batch_id,
    "url": "https://syrup.keboola.com/gooddata-writer/batch?writerId=writer1&batchId=batch_id",
    "duration": 35.12 
}


### Upload selected table

#### Parameters

* **tableId** (required) - name of table to upload
* **writerId** (required)
* **incrementalLoad** (optional) - force incremental or full load
* **pid** (optional) - filter rows from data table by filter column (see [Project clones](#projectclones))
* **queue** (optional) - with value **secondary** will put job in secondary queue
POST /upload-table
> X-StorageApi-Token: your_token
> Accept: application/json
{ "tableId": "out.c-main-products", "writerId": "123" }
< 202
< Content-Type: application/json
{ 
    "status": "ok", 
    "batch": batch_id,
    "url": "https://syrup.keboola.com/gooddata-writer/batch?writerId=writer1&batchId=batch_id",
    "duration": 35.12 
}


### Update model of selected table

#### Parameters

* **tableId** (required) - name of table to upload
* **writerId** (required)
* **pid** (optional) - filter rows from data table by filter column (see [Project clones](#projectclones))
* **queue** (optional) - with value **secondary** will put job in secondary queue
POST /update-model
> X-StorageApi-Token: your_token
> Accept: application/json
{ "tableId": "out.c-main-products", "writerId": "123" }
< 202
< Content-Type: application/json
{ 
    "status": "ok", 
    "job": job_id,
    "url": "https://syrup.keboola.com/gooddata-writer/jobs?writerId=writer1&jobId=job_id",
    "duration": 35.12 
}


### Load data to selected tables

#### Parameters

* **tables** (required) - array of tables to upload
* **writerId** (required)
* **incrementalLoad** (optional) - force incremental or full load
* **pid** (optional) - filter rows from data table by filter column (see [Project clones](#projectclones))
* **queue** (optional) - with value **secondary** will put job in secondary queue
POST /load-data
> X-StorageApi-Token: your_token
> Accept: application/json
{ "tables": ["out.c-main.products", "out.c-main.categories"], "writerId": "123" }
< 202
< Content-Type: application/json
{ 
    "status": "ok", 
    "job": job_id,
    "url": "https://syrup.keboola.com/gooddata-writer/jobs?writerId=writer1&jobId=job_id",
    "duration": 35.12 
}


### Reset table
Remove dataset in GoodData project belonging to the table and reset it's export status

#### Parameters

* **tableId** (required) - name of table to reset
* **writerId** (required)
* **queue** (optional) - with value **secondary** will put job in secondary queue
POST /reset-table
> X-StorageApi-Token: your_token
> Accept: application/json
{ "writerId": "writer1", "tableId": "out.c-main.table" }
< 202
< Content-Type: application/json
{ 
    "status": "ok",
    "jobId": batch_id,
    "url": "https://syrup.keboola.com/gooddata-writer/jobs?writerId=writer1&jobId=job_id",
    "duration": 35.12 
}


### Upload date dimension

Selectively upload date dimension (must be already configured in Writer)

#### Parameters

* **name** (required) - name of date dimension
* **writerId** (required)
* **pid** (optional) - filter rows from data table by filter column (see [Project clones](#projectclones))
* **queue** (optional) - with value **secondary** will put job in secondary queue
POST /upload-date-dimension
> X-StorageApi-Token: your_token
> Accept: application/json
{ "name": "ProductDate", "writerId": "123" }
< 202
< Content-Type: application/json
{ 
    "status": "ok",
    "jobId": batch_id,
    "url": "https://syrup.keboola.com/gooddata-writer/jobs?writerId=writer1&jobId=job_id",
    "duration": 35.12 
}


### Execute reports

Use this method to execute selected reports in GoodData

#### Parameters

* **writerId** (required)
* **pid** (required) - PID of project
* **reports** (optional) - array of GD links to reports
* **queue** (optional) - with value **secondary** will put job in secondary queue
POST /execute-reports
> X-StorageApi-Token: your_token
> Accept: application/json
{
    "writerId": "123",
    "pid": "pr0j3ct_p1d",
    "reports": [
        "/gdc/md/pr0j3ct_p1d/obj/672",
        "/gdc/md/pr0j3ct_p1d/obj/673"
    ]
}
< 202
< Content-Type: application/json
{ 
    "status": "ok",
    "jobId": batch_id,
    "url": "https://syrup.keboola.com/gooddata-writer/jobs?writerId=writer1&jobId=job_id",
    "duration": 35.12 
}


--
Jobs
--


### Get jobs list

#### Parameters

* **writerId** (required) - id of writer
* **days** (optional) - age of jobs which should be fetched, default is 7 days
* **command** (optional) - filter jobs by command
* **tableId** (optional) - filter jobs belonging to given tableId
* **tokenId** (optional) - filter jobs belonging to given token
* **status** (optional) - filter jobs with given status

GET /jobs?writerId={writerId}
> X-StorageApi-Token: your_token
< 200
< Content-Type: application/json
{
    "jobs": [
        {
            "id": 762909,
            "batchId": 762908
            "runId": 762907,
            "projectId": 265,
            "writerId": "wr9",
            "token": {
                "id": 2352,
                "description": "Master Token"
            },
            "createdTime": "2013-04-05T10:15:48+02:00",
            "startTime": "2013-04-05T10:45:06+02:00",
            "endTime": "2013-04-05T10:45:17+02:00",
            "command": "addUserToProject",
            "parameters": {
                "writerId": "wr9",
                "email": "11112@test.keboola.com",
                "pid": "xjywplmhejceb6j3ezzlxiganmjavqio",
                "role": "editor"
            },
            "result": {
                "id": "762909",
                "status": "ok",
                "response": [],
                "duration": 8
            },
            "gdWriteStartTime": "2013-04-05T10:45:12+02:00",
            "status": "success",
            "log": "url to log"
        },
    ],
    "status": "ok",
    "duration": 1.4656889438629
}



### Get job detail

GET /jobs?writerId={writerId}&jobId={jobId}
> X-StorageApi-Token: your_token
< 200
< Content-Type: application/json
{
    "id": 762909,
    "runId": 762908,
    "projectId": 265,
    "writerId": "wr9",
    "token": {
        "id": 2352,
        "description": "Master Token"
    },
    "createdTime": "2013-04-05T10:15:48+02:00",
    "startTime": "2013-04-05T10:45:06+02:00",
    "endTime": "2013-04-05T10:45:17+02:00",
    "command": "addUserToProject",
    "parameters": {
        "writerId": "wr9",
        "email": "11112@test.keboola.com",
        "pid": "xjywplmhejceb6j3ezzlxiganmjavqio",
        "role": "editor"
    },
    "result": {
        "id": "762909",
        "status": "ok",
        "response": [],
        "duration": 8
    },
    "gdWriteStartTime": "2013-04-05T10:45:12+02:00",
    "status": "success",
    "log": "url to log"
}



### Get batch detail

GET /batch?writerId={writerId}&batchId={batchId}
> X-StorageApi-Token: your_token
< 200
< Content-Type: application/json
{
    "batchId": 762909,
    "projectId": 265,
    "writerId": "wr9",
    "createdTime": "2013-04-05T10:15:48+02:00",
    "startTime": "2013-04-05T10:45:06+02:00",
    "endTime": "2013-04-05T10:45:17+02:00",
    "status": "success",
    "jobs": [762910, 762911, 762912]
}



--
User Filters

Commands for manipulation with GoodData's Mandatory User Filters

# Tables configuration

## filters

Table is used for list of all filters associated with particular writer. When you [create new filter](#post-%2Fgooddata-writer%2Ffilters) Writer will create new row in this table. It's columns are:

* **name** (primary key) - Name of the filter (unique)
* **attribute** - attribute to be filtered, in SAPI notation
* **operator** - operator, one of =,>,<,<>, IN, NOT IN. Default "="
* **value** - value of attribute

## filters_projects

Reference table between filters and projects. Row in this table added when new filter is created using [create filter api call](#post-%2Fgooddata-writer%2Ffilters). Columns:

* **uri** (primary key) - after filter is created in GD, it has this uri
* **name** - filter name
* **pid** - GD project id

## filters_users

Reference table between filters and users. You can assing filter(s) to user using [add filter to user](#post-%2Fgooddata-writer%2Ffilters-users). Columns:

* **id** (primary key) - generated automatically by Writer
* **name** - filter name
* **email** - user email
* **pid** - pid for filtering user filters

--


### Get Filters

#### Parameters

* **writerId** (required)
* **pid** (optional) - to filter by project
* **email** (optional) - to filter by user

GET /filters?writerId={writerId}
> X-StorageApi-Token: your_token
< 200
< Content-Type: application/json
{
    "filters": [
        {
            "name": "filter2",
            "attribute": "out.c-main.users.name",
            "operator": "<>",
            "value": "miro"
        },
        {
            "name": "filter1",
            "attribute": "out.c-main.users.name",
            "operator": "=",
            "value": "miro"
        }
    ],
    "status": "ok",
    "duration": 1.1255049705505
}

### Get Filters Projects

#### Parameters

* **writerId** (required)
* **pid** (optional) - to filter by project
* **filter** (optional) - to filter by filter name

GET /filters-projects?writerId={writerId}
> X-StorageApi-Token: your_token
< 200
< Content-Type: application/json
{
    "filters": [
        {
            "uri": "/gdc/md/PID/obj/123"
            "filter": "filter1",
            "pid": "PID"
        }
    ],
    "status": "ok",
    "duration": 1.1255049705505
}

### Get Filters Users

#### Parameters

* **writerId** (required)
* **email** (optional) - to filter by user email
* **filter** (optional) - to filter by filter name

GET /filters-users?writerId={writerId}
> X-StorageApi-Token: your_token
< 200
< Content-Type: application/json
{
    "filters": [
        {
            "id": "idopsfiui78ufdisfo"
            "filter": "filter1",
            "email": "user@domain.com"
        }
    ],
    "status": "ok",
    "duration": 1.1255049705505
}

### Create Filter

#### Parameters

* **writerId** (required)
* **pid** (required) - PID of the project, in which the filter will be created
* **name** (required) - Name of the filter
* **attribute** (required) - Name of the attribute in SAPI notation (stage.c-bucket.table.column)
* **operator** (optional) - One of =,>,<,<>, IN, NOT IN. Default "=".
* **value** (required) - Value of the attribute, could be an array in combination with operators "IN" or "NOT IN"
* **queue** (optional) - with value **secondary** will put job in secondary queue
POST /filters
> X-StorageApi-Token: your_token
> Accept: application/json
{ 
    "writerId": "123", 
    "pid": "p1d_0f_y0u2_6d_p20j3ct", 
    "name": "myFilter", 
    "attribute": "out.c-main.users.name", 
    "value": "John Smith" 
}
< 200
< Content-Type: application/json
{ "status": "ok", "uri": "gdc/md/p1d_0f_y0u2_6d_p20j3ct/obj/12" }


### Delete Filter
DELETE /filters?writerId={writerId}&name={filterName}
> X-StorageApi-Token: your_token
< 200
< Content-Type: application/json
{
    "status": "ok"
}


### Assign Filter to User

#### Parameters

* **writerId** (required)
* **email** (required) - email of the User, who will be affected by the filter(s)
* **filters** (required) - Array of filters to assign
* **queue** (optional) - with value **secondary** will put job in secondary queue

POST /filters-users
> X-StorageApi-Token: your_token
> Accept: application/json
{ 
    "writerId": "123", 
    "email": "john.smith@keboola.com",
    "filters": ["myFilter"]
}
< 202
< Content-Type: application/json
{ 
    "status": "ok",
    "jobId": batch_id,
    "url": "https://syrup.keboola.com/gooddata-writer/jobs?writerId=writer1&jobId=job_id",
    "duration": 35.12 
}


### Synchronize Filters
Synchronizes filters in GoodData project according to writer's configuration

#### Parameters

* **writerId** (required)
* **pid** (optional) - PID of the project
* **queue** (optional) - with value **secondary** will put job in secondary queue

POST /sync-filters
> X-StorageApi-Token: your_token
> Accept: application/json
{ "writerId": "123", "pid": "p1d_0f_y0u2_6d_p20j3ct" }
< 202
< Content-Type: application/json
{ 
    "status": "ok",
    "jobId": batch_id,
    "url": "https://syrup.keboola.com/gooddata-writer/jobs?writerId=writer1&jobId=job_id",
    "duration": 35.12 
}

--
SSO

Call to obtain an SSO link for user.

**Works only for users created by the writer itself via [Users Management API](/#usersmanagement) (won't work for already existing users with sso provider other then keboola.com)**

--

### Get SSO link

#### Parameters

* **writerId** (required)
* **pid** (optional) - PID of the project
* **email** (required) - Email of the user for whom the SSO link is generated
* **createUser** (optional) - If user doesn't exists in GD yet set this option to 1, user will be created in GD and add to project prior to SSO link generation.
* **firstName** (optional) - If createUser is set to 1, this specifies users firstName
* **lastName**  (optional) - If createUser is set to 1, this specifies users lastName
* **password**  (optional) - If createUser is set to 1, this specifies users password
* **role**  (optional) - If createUser is set to 1, this specifies users role (one of: admin, editor, readOnly, dashboardOnly)
* **targetUrl** (optional) - link to specific dashboard, e.g. for url `/dashboard.html#project=/gdc/projects/PID&dashboard=/gdc/md/PID/obj/DASHBOARD_ID` use url-encoded: `%2Fdashboard.html%23project%3D%2Fgdc%2Fprojects%2FPID%26dashboard%3D%2Fgdc%2Fmd%2FPID%2Fobj%2FDASHBOARD_ID`

GET /sso?writerId={writerId}&pid={pr0j3ct_p1d}&email={user@email.com}
> X-StorageApi-Token: your_token
> Accept: application/json
< 200
< Content-Type: application/json
{    
    "ssoLink": "https://secure.gooddata.com/gdc/account/customerlogin?sessionId=-----BEGIN+PGP+MESSAGE-----s0m3_l0000n6_h4sh",
    "status": "ok"    
}

GET /sso?writerId={writerId}&pid={pr0j3ct_p1d}&email={user@email.com}&createUser=1&firstName=john&lastName=smith&password=secretPassword
> X-StorageApi-Token: your_token
> Accept: application/json
< 200
< Content-Type: application/json
{    
    "ssoLink": "https://secure.gooddata.com/gdc/account/customerlogin?sessionId=-----BEGIN+PGP+MESSAGE-----s0m3_l0000n6_h4sh",
    "status": "ok"    
}

--
Proxy

Simple proxy for direct calls to GoodData API
--

### Make GET request to GoodData API

#### Parameters

* **writerId** (required)
* **query** (required) - Link to GoodData API resource (without protocol and domain)

#### Returns

* **response**  - Response from GoodData API in JSON format

GET /proxy?writerId={writerId}&query={query}
> X-StorageApi-Token: your_token
> Accept: application/json
< 200
< Content-Type: application/json
{
    "response": { ... },
    "status": "ok",
    "duration": 7.16
}


GET /proxy?writerId={writerId}&query=/gdc/md/{pr0j3ct_p1d}/query/projectdashboards
> X-StorageApi-Token: your_token
> Accept: application/json
< 200
< Content-Type: application/json
{
    "response": {
        "query": {
            "entries": [
                {
                    "link": "/gdc/md/pr0j3ct_p1d/obj/672",
                    "author": "/gdc/account/profile/098f6bcd4621d373cade4e832627b4f6",
                    "tags": "",
                    "created": "2013-02-19 12:51:36",
                    "deprecated": "0",
                    "summary": "",
                    "title": "First Dashboard",
                    "category": "projectDashboard",
                    "updated": "2013-02-27 16:45:26",
                    "contributor": "/gdc/account/profile/ad0234829205b9033196ba818f7a872b"
                }
            ],
            "meta": {
                "summary": "Metadata Query Resources for project 'pr0j3ct_p1d'",
                "title": "List of projectdashboards",
                "category": "query"
            }
        }
    },
    "status": "ok",
    "duration": 2.4110591411591
}


### Make POST request to GoodData API

#### Parameters

* **writerId** (required)
* **query** (required) - Link to GoodData API resource (without protocol and domain)
* **payload** (required) - Body of the POST request to GD
* **queue** (optional) - with value **secondary** will put job in secondary queue

#### Returns

* **response**  - Response from GoodData API in JSON format

POST /proxy
> X-StorageApi-Token: your_token
> Accept: application/json
{
    "writerId": "123",
    "query": "/gdc/md/p1d_0f_y0u2_6d_p20j3ct/obj",
    "payload": { ... }
}
< 202
< Content-Type: application/json
{ 
    "status": "ok",
    "jobId": batch_id,
    "url": "https://syrup.keboola.com/gooddata-writer/jobs?writerId=writer1&jobId=job_id",
    "duration": 35.12 
}

