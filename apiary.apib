HOST: https://syrup.keboola.com/gooddata-writer

--- Keboola GoodData Writer API ---
---
API for access to Keboola Connection GoodData Writer

API calls work only in integration with Keboola Storage API and need Storage API token
---

--
Writers
Commands for handling whole writers
--


### Get writers list
Returns list of available writers and their buckets

GET /writers
> X-StorageApi-Token: your_token
< 200
< Content-Type: application/json
{
    "status": "ok",
    "duration": 45.11,
    "writers": [
        {
            "id": "writer1",
            "bucket": "sys.c-wr-gooddata-writer1"
        },
        {
            "id": "writer2",
            "bucket": "sys.c-wr-gooddata-writer2"
        }
    ]
}

### Get writer info
Returns attributes of the writer

#### Parameters

* **writerId** (required) - KBC id of writer

GET /writers?writerId={writerId}
> X-StorageApi-Token: your_token
< 200
< Content-Type: application/json
{
    "status": "ok",
    "duration": 45.11,
    "writer": [
        {
            "writer": "gooddata",
            "writerId": "writer1",
            "gd.pid": "vcmxlgjsojfdsjfdsdskfÅ¯sfdks",
            "gd.uid": "dkgkfdreituigjfgfjkdgfkdfng",
            "gd.username": "user1@clients.keboola.com",
            "gd.password": "password"
        }
    ]
}


### Create writer
Creates new configuration bucket and creates GoodData project and dedicated GoodData user. Credentials and PID are stored to bucket attributes.

#### Parameters

* **writerId** (required) - KBC id of writer
* **backendUrl** (optional) - url of backend (secure.gooddata.com by default)
* **accessToken** (optional) - GoodData access token (main Keboola by default)
* **queue** (optional) - with value **secondary** will put job in secondary queue
POST /writers
> X-StorageApi-Token: your_token
> Accept: application/json
{ "writerId": "writer1" }
< 200
< Content-Type: application/json
{
    "status": "ok",
    "duration": 2.89,
    "job": job_id
}


### Delete writer
Deletes configuration bucket and enqueues GoodData project and dedicated GoodData user for removal (real removal from GoodData is scheduled after one month)

#### Parameters

* **writerId** (required) - KBC id of writer
* **queue** (optional) - with value **secondary** will put job in secondary queue
DELETE /writers?writerId={writerId}
> X-StorageApi-Token: your_token
< 200
< Content-Type: application/json
{
    "status": "ok",
    "duration": 1.89,
    "job": job_id
}



--
Projects
Commands for handling projects of specific writer
--


### Get projects list

GET /projects?writerId={writerId}
> X-StorageApi-Token: your_token
< 200
< Content-Type: application/json
{ "status": "ok", "duration": 31.54, "projects": [
        {
            "pid": "l7eqkx6daomtv5iw2912p019anskzt1n",
            "active": "1"
        },
        {
            "pid": "rcgtjwroldsctin8pzxxg1n1nwbgelhb",
            "active": "1"
        },
        {
            "pid": "xjywplmhejceb6j3ezzlxiganmjavqio",
            "active": "1"
        }
    ]
}


### Create project
Creates new GoodData project by cloning the main project with PID in bucket attribute.

#### Parameters

* **writerId** (required) - KBC id of writer
* **name** (optional) - name of project ("KBC - projectId - writerId" by default)
* **accessToken** (optional) - GoodData access token (main Keboola by default)
* **queue** (optional) - with value **secondary** will put job in secondary queue
POST /projects
> X-StorageApi-Token: your_token
> Accept: application/json
{ "writerId": "writer1" }
< 200
< Content-Type: application/json
{ "status": "ok", "job": job_id, "duration": 35.12 }


### Create project and wait for PID
Creates new GoodData project by cloning the main project with PID in bucket attribute. Returns it's PID on output.

#### Parameters

* **wait** (optional)
* **writerId** (required) - KBC id of writer
* **name** (optional) - name of project ("KBC - projectId - writerId" by default)
* **accessToken** (optional) - GoodData access token (main Keboola by default)
* **queue** (optional) - with value **secondary** will put job in secondary queue
POST /projects
> X-StorageApi-Token: your_token
> Accept: application/json
{ "writerId": "writer1", "wait": 1 }
< 200
< Content-Type: application/json
{ "status": "ok", "pid": pid, "duration": 345.51 }


### Get list of users in project

GET /project-users?writerId={writerId}&pid={pid}
> X-StorageApi-Token: your_token
< 200
< Content-Type: application/json
{ "status": "ok", "duration": 31.54, "users": [
        {
            "email": "11112@test.keboola.com",
            "role": "editor"
        },
        {
            "email": "2@test.keboola.com",
            "role": "editor"
        }
    ]
}


### Add user to project
Adds GoodData user to specified project.

If user does not exists or exists in other domain, project invitation will be sent to user.

#### Parameters

* **wait** (optional)
* **writerId** (required) - KBC id of writer
* **pid** (required) - PID of project
* **email** (required) - email of user
* **role** (required) - role of user (one of: admin, editor, readOnly, dashboardOnly)
* **queue** (optional) - with value **secondary** will put job in secondary queue
POST /project-users
> X-StorageApi-Token: your_token
> Accept: application/json
{ "writerId": "writer1", "pid": "xjywplmhejceb6j3ezzlxiganmjavqio", "email": "user1@keboola.com", "role": "editor" }
< 200
< Content-Type: application/json
{ "status": "ok", "job": job_id, "duration": 35.12 }

### Add user to project and create him if does not exists
Adds GoodData user to specified project. New user account will be created if user does not exists in GoodData

If user exists in other domain, project invitation will be sent to user.

#### Parameters

* **createUser** (optional)
* **wait** (optional)
* **writerId** (required) - KBC id of writer
* **pid** (required) - PID of project
* **email** (required) - email of user
* **role** (required) - role of user (one of: admin, editor, readOnly, dashboardOnly)
* **queue** (optional) - with value **secondary** will put job in secondary queue
POST /project-users
> X-StorageApi-Token: your_token
> Accept: application/json
{ "createUser": "1", "writerId": "writer1", "pid": "xjywplmhejceb6j3ezzlxiganmjavqio", "email": "user1@keboola.com", "role": "editor" }
< 200
< Content-Type: application/json
{ "status": "ok", "job": job_id, "duration": 35.12 }

### Remove user from project
Remove user from specified project. Project invitations will be also canceled.

#### Parameters

* **wait** (optional)
* **writerId** (required) - KBC id of writer
* **pid** (required) - PID of project
* **email** (required) - email of user
DELETE /project-users?writerId={writerId}&pid={pr0j3ct_p1d}&email={user@email.com}
> X-StorageApi-Token: your_token
< 200
< Content-Type: application/json
{ "status": "ok", "job": job_id, "duration": 35.12 }


--
Users
Commands for handling GoodData users
--


### Get users list

GET /users?writerId={writerId}
> X-StorageApi-Token: your_token
< 200
< Content-Type: application/json
{ "status": "ok", "duration": 31.54, "users": [
        {
            "email": "11112@test.keboola.com",
            "uri": "/gdc/account/profile/3b761f4d31dcd3c28a4336117635dd38"
        },
        {
            "email": "2@test.keboola.com",
            "uri": "/gdc/account/profile/8a2c90bcae3ea2f7eafc875c0917e268"
        }
    ]
}


### Create user
Creates new GoodData user in Keboola domain.

#### Parameters

* **writerId** (required) - KBC id of writer
* **email** (required) - user email
* **password** (required) - user password (has to have at least seven characters)
* **firstName** (required) - user first name
* **lastName** (required) - user last name
* **ssoProvider** (optional) - optional ssoProvider, default is keboola.com
* **queue** (optional) - with value **secondary** will put job in secondary queue
POST /users
> X-StorageApi-Token: your_token
> Accept: application/json
{ "writerId": "writer1", "email" }
< 200
< Content-Type: application/json
{ "status": "ok", "job": job_id, "duration": 35.12 }


### Create user and wait
Creates new GoodData user in Keboola domain and waits for it's user uri.

#### Parameters

* **wait** (required)
* **writerId** (required) - KBC id of writer
* **email** (required) - user email
* **password** (required) - user password (has to have at least seven characters)
* **firstName** (required) - user first name
* **lastName** (required) - user last name
* **queue** (optional) - with value **secondary** will put job in secondary queue
POST /users
> X-StorageApi-Token: your_token
> Accept: application/json
{ "writerId": "writer1", "email" }
< 200
< Content-Type: application/json
{ "status": "ok", "uri": "/gdc/account/profile/8a2c90bcae3ea2f7eafc875c0917e268", "duration": 335.12 }



--
Project structure
Commands for manipulation with GoodData project structure and data
--


### Upload whole project

#### Parameters

* **wait** (optional)
* **writerId** (required) - KBC id of writer
* **incrementalLoad** (optional) - force incremental or full load
* **sanitize** (optional) - force replacing or skipping null values in csv files
* **queue** (optional) - with value **secondary** will put job in secondary queue
POST /upload-project
> X-StorageApi-Token: your_token
> Accept: application/json
{ "writerId": "123" }
< 200
< Content-Type: application/json
{ "status": "ok", "batch": "batch_id", "jobs": {"job1_id", "job2_id" } }


### Upload selected table

#### Parameters

* **wait** (optional)
* **tableId** (required) - name of table to upload
* **writerId** (required) - KBC id of writer
* **incrementalLoad** (optional) - force incremental or full load
* **sanitize** (optional) - force replacing or skipping null values in csv files
* **queue** (optional) - with value **secondary** will put job in secondary queue
POST /upload-table
> X-StorageApi-Token: your_token
> Accept: application/json
{ "tableId": "out.c-main-products", "writerId": "123" }
< 200
< Content-Type: application/json
{ "status": "ok", "batch": "batch_id", "jobs": {"job1_id", "job2_id" } }


### Get dataset xml

GET /xml?writerId={writerId}&tableId={tableId}
> X-StorageApi-Token: your_token
< 200
< Content-Type: application/xml
<?xml version="1.0"?>
<schema>
    <name>Categories</name>
    <columns>
        <column>
            <name>id</name>
            <title>id (Categories)</title>
            <ldmType>CONNECTION_POINT</ldmType>
            <folder>Categories</folder>
        </column>
        <column>
            <name>name</name>
            <title>name (Categories)</title>
            <ldmType>ATTRIBUTE</ldmType>
            <folder>Categories</folder>
        </column>
    </columns>
</schema>


### Execute reports

Use this method to execute selected reports in GoodData

#### Parameters

* **wait** (optional)
* **writerId** (required) - KBC id of writer
* **pid** (required) - PID of project
* **reports** (optional) - array of GD links to reports
* **queue** (optional) - with value **secondary** will put job in secondary queue
POST /execute-reports
> X-StorageApi-Token: your_token
> Accept: application/json
{
    "writerId": "123",
    "pid": "pr0j3ct_p1d",
    "reports": [
        "/gdc/md/pr0j3ct_p1d/obj/672",
        "/gdc/md/pr0j3ct_p1d/obj/673"
    ]
}
< 200
< Content-Type: application/json
{
    "status": "ok",
    "job": "job1d",
    "duration": 2.23
}


--
Jobs
--


### Get jobs list

GET /jobs?writerId={writerId}
> X-StorageApi-Token: your_token
< 200
< Content-Type: application/json
{
    "jobs": [
        {
            "id": 762909,
            "batchId": 762908
            "runId": 762907,
            "projectId": 265,
            "writerId": "wr9",
            "token": {
                "id": 2352,
                "description": "Master Token"
            },
            "initializedBy": "",
            "createdTime": "2013-04-05T10:15:48+02:00",
            "startTime": "2013-04-05T10:45:06+02:00",
            "endTime": "2013-04-05T10:45:17+02:00",
            "command": "addUserToProject",
            "pid": "",
            "dataset": "",
            "xmlFile": "",
            "csvFile": "",
            "parameters": {
                "writerId": "wr9",
                "wait": 1,
                "email": "11112@test.keboola.com",
                "pid": "xjywplmhejceb6j3ezzlxiganmjavqio",
                "role": "editor"
            },
            "result": {
                "id": "762909",
                "status": "ok",
                "response": [],
                "duration": 8
            },
            "gdWriteStartTime": "2013-04-05T10:45:12+02:00",
            "gdWriteBytes": "",
            "status": "success",
            "log": "url to log"
        },
    ],
    "status": "ok",
    "duration": 1.4656889438629
}



### Get job detail

GET /jobs?writerId={writerId}&jobId={jobId}
> X-StorageApi-Token: your_token
< 200
< Content-Type: application/json
{
    "job": {
        "id": 762909,
        "runId": 762908,
        "projectId": 265,
        "writerId": "wr9",
        "token": {
            "id": 2352,
            "description": "Master Token"
        },
        "initializedBy": "",
        "createdTime": "2013-04-05T10:15:48+02:00",
        "startTime": "2013-04-05T10:45:06+02:00",
        "endTime": "2013-04-05T10:45:17+02:00",
        "command": "addUserToProject",
        "pid": "",
        "dataset": "",
        "xmlFile": "",
        "csvFile": "",
        "parameters": {
            "writerId": "wr9",
            "wait": 1,
            "email": "11112@test.keboola.com",
            "pid": "xjywplmhejceb6j3ezzlxiganmjavqio",
            "role": "editor"
        },
        "result": {
            "id": "762909",
            "status": "ok",
            "response": [],
            "duration": 8
        },
        "gdWriteStartTime": "2013-04-05T10:45:12+02:00",
        "gdWriteBytes": "",
        "status": "success",
        "log": "url to log"
    },
    "status": "ok",
    "duration": 1.4656889438629
}

--
User Filters

Commands for manipulation with GoodData's Mandatory User Filters
--


### Get Filters
GET /filters?writerId={writerId}
> X-StorageApi-Token: your_token
< 200
< Content-Type: application/json
{
    "filters": [
        {
            "name": "filter2",
            "attribute": "out.c-main.users.name",
            "element": "miro",
            "operator": "<>",
            "uri": ""
        },
        {
            "name": "filter1",
            "attribute": "out.c-main.users.name",
            "element": "miro",
            "operator": "=",
            "uri": "/gdc/md/fem1t9ff4krg********/obj/85"
        }
    ],
    "status": "ok",
    "duration": 1.1255049705505
}

### Get Filters for user
GET /filters?writerId={writerId}&userEmail={userEmail}
> X-StorageApi-Token: your_token
< 200
< Content-Type: application/json
{
    "filters": [
        {
            "name": "filter1",
            "attribute": "out.c-main.users.name",
            "element": "miro",
            "operator": "=",
            "uri": "/gdc/md/fem1t9ff4krg********/obj/85"
        }
    ],
    "status": "ok",
    "duration": 1.1255049705505
}

### Create Filter

#### Parameters

* **wait** (optional)
* **writerId** (required) - KBC id of writer
* **pid** (required) - PID of the project, in which the filter will be created
* **name** (required) - Name of the filter
* **attribute** (required) - Name of the attribute in SAPI notation (stage.c-bucket.table.column)
* **element** (required) - Value of the attribute
* **operator** (optional) - One of =,>,<,<>. Default "=".
* **queue** (optional) - with value **secondary** will put job in secondary queue
POST /filters
> X-StorageApi-Token: your_token
> Accept: application/json
{
    "wait": 1,
    "writerId": "123",
    "pid": "p1d_0f_y0u2_6d_p20j3ct",
    "name": "myFilter",
    "attribute": "out.c-main.users.name",
    "element": "John Smith"
}
< 200
< Content-Type: application/json
{ "status": "ok", "uri": "gdc/md/p1d_0f_y0u2_6d_p20j3ct/obj/12" }


### Assign Filter to User

#### Parameters

* **wait** (optional)
* **writerId** (required) - KBC id of writer
* **pid** (required) - PID of the project, in which the filter exists
* **filters** (required) - Array of filters to assign
* **userEmail** (required) - email of the User, who will be affected by the filter(s)
* **queue** (optional) - with value **secondary** will put job in secondary queue

POST /filters-user
> X-StorageApi-Token: your_token
> Accept: application/json
{
    "wait": 1,
    "writerId": "123",
    "pid": "p1d_0f_y0u2_6d_p20j3ct",
    "filters": ["myFilter"],
    "userEmail": "john.smith@keboola.com" }
< 200
< Content-Type: application/json
{ "status": "ok" }


### Synchronize Filters
Synchornize filters in Storage API with GoodData project

#### Parameters

* **wait** (optional)
* **writerId** (required) - KBC id of writer
* **pid** (optional) - PID of the project
* **queue** (optional) - with value **secondary** will put job in secondary queue

POST /sync-filters
> X-StorageApi-Token: your_token
> Accept: application/json
{ "wait": 1, "writerId": "123", "pid": "p1d_0f_y0u2_6d_p20j3ct" }
< 200
< Content-Type: application/json
{ "status": "ok" }

--
SSO

Call to obtain an SSO link for user.
--

### Get SSO link

#### Parameters

* **writerId** (required) - KBC id of writer
* **pid** (optional) - PID of the project
* **email** (required) - Email of the user for whom the SSO link is generated
* **createUser** (optional) - If user doesn't exists in GD yet set this option to 1, user will be created in GD and add to project prior to SSO link generation.
* **firstName** (optional) - If createUser is set to 1, this specifies users firstName
* **lastName**  (optional) - If createUser is set to 1, this specifies users lastName
* **password**  (optional) - If createUser is set to 1, this specifies users password
* **role**  (optional) - If createUser is set to 1, this specifies users role (one of: admin, editor, readOnly, dashboardOnly)

GET /sso?writerId={writerId}&pid={pr0j3ct_p1d}&email={user@email.com}&wait=1
> X-StorageApi-Token: your_token
> Accept: application/json
< 200
< Content-Type: application/json
{
    "ssoLink": "https://secure.gooddata.com/gdc/account/customerlogin?sessionId=-----BEGIN+PGP+MESSAGE-----s0m3_l0000n6_h4sh",
    "status": "ok"
}

GET /sso?writerId={writerId}&pid={pr0j3ct_p1d}&email={user@email.com}&wait=1&createUser=1&firstName=john&lastName=smith&password=secretPassword
> X-StorageApi-Token: your_token
> Accept: application/json
< 200
< Content-Type: application/json
{
    "ssoLink": "https://secure.gooddata.com/gdc/account/customerlogin?sessionId=-----BEGIN+PGP+MESSAGE-----s0m3_l0000n6_h4sh",
    "status": "ok"
}

--
Proxy

Simple proxy for direct calls to GoodData API
--

### Make GET request to GoodData API

#### Parameters

* **writerId** (required) - KBC id of writer
* **query** (required) - Link to GoodData API resource (without protocol and domain)

#### Returns

* **response**  - Response from GoodData API in JSON format

GET /proxy?writerId={writerId}&query={query}
> X-StorageApi-Token: your_token
> Accept: application/json
< 200
< Content-Type: application/json
{
    "response": { ... },
    "status": "ok",
    "duration": 7.16
}


GET /proxy?writerId={writerId}&query=/gdc/md/{pr0j3ct_p1d}/query/projectdashboards
> X-StorageApi-Token: your_token
> Accept: application/json
< 200
< Content-Type: application/json
{
    "response": {
        "query": {
            "entries": [
                {
                    "link": "/gdc/md/pr0j3ct_p1d/obj/672",
                    "author": "/gdc/account/profile/098f6bcd4621d373cade4e832627b4f6",
                    "tags": "",
                    "created": "2013-02-19 12:51:36",
                    "deprecated": "0",
                    "summary": "",
                    "title": "First Dashboard",
                    "category": "projectDashboard",
                    "updated": "2013-02-27 16:45:26",
                    "contributor": "/gdc/account/profile/ad0234829205b9033196ba818f7a872b"
                }
            ],
            "meta": {
                "summary": "Metadata Query Resources for project 'pr0j3ct_p1d'",
                "title": "List of projectdashboards",
                "category": "query"
            }
        }
    },
    "status": "ok",
    "duration": 2.4110591411591
}


### Make POST request to GoodData API

#### Parameters

* **writerId** (required) - KBC id of writer
* **query** (required) - Link to GoodData API resource (without protocol and domain)
* **payload** (required) - Body of the POST request to GD
* **wait** (optional) - if not set, a job ID is returned

#### Returns

* **response**  - Response from GoodData API in JSON format

POST /proxy
> X-StorageApi-Token: your_token
> Accept: application/json
{
    "wait": 1,
    "writerId": "123",
    "query": "/gdc/md/p1d_0f_y0u2_6d_p20j3ct/obj",
    "payload": { ... }
}
< 200
< Content-Type: application/json
{
    "response": { ... },
    "status": "ok",
    "duration": 7.16
}